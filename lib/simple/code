#!/bin/bash

set -f

getOutput() {
  sed -E 's/"[:,]"/\n/g;s/^[[{]"/\n/g;s/"[]}$]/\n/g' | sed -n '9p' | jsondecode | tee /dev/stderr
}

sendCode() {
  local -r lang="$1"

  curl -is "https://eval.in/" -F "code=<-" -F "lang=$lang" -F "utf8=%CE%BB" -F "execute=on" \
    | tee /dev/stderr \
    | sed -En '
      s/^Location: //

      # if location line print and quit
      T
      p;q'\
    | tr -d "\n\r"
}

main() {
  local -r channel="$2"
  local -r message="$6"
  local -ri headerLength="$(getheaderlength)"
  local -A languages=()

  source "$botLib/utility.sh"
  source "$botLib/parseArgs.sh"

  languages[python]="python/cpython-2.7.8"
  languages[py]="python/cpython-2.7.8"
  languages[python3]="python/cpython-3.4.1"
  languages[ruby]="ruby/mri-2.3"
  languages[rb]="ruby/mri-2.3"
  languages[perl]="perl/perl-5.20.0"
  languages[php]="php/php-5.5.14"
  languages[c]="c/gcc-4.9.1"
  languages[c++]="c++/c++11-gcc-4.9.1"

  declare assignableParameters=( l )

  IFS=" "
  local -a splitMessage=( $message )
  unset IFS
  parseArgs "${splitMessage[@]}"

  local lang
  if [[ "${argMap[l]+_}" ]]; then
    lang="${argMap[l]}"
    if [[ "${languages[$lang]+_}" ]]; then
      lang="${languages[$lang]}"
    fi
  elif [[ "${argMap[p]+_}" ]]; then 
    lang="python/cpython-2.7.8"
  else
    lang="ruby/mri-2.1"
  fi

  local url="$(sendCode "$lang" <<< "${vargs[@]}")"
  if [[ -n "$url" ]]; then 
    local json="$(curl -s "$url.json" | getOutput)"
    local reply="$json (${url})"

    local length="$(wc -c <<< "$reply")"
    local lines="$(wc -l <<< "$reply")"

    if ((length + headerLength < 508 && lines <= 1)); then
      printf "=> %s\n" "$reply"| privmsg "$channel" 
    else
      printf "%s\n" "$url" | privmsg "$channel"
    fi
  fi
}

main "$@"
