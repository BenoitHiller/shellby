#!/bin/bash

set -f 

source "$botLib/utility.sh"
source "$botLib/parseArgs.sh"


####################
# Helper Functions #
####################

# Filter log files for those between the specified dates
#
# Consumes a list of null separated files from stdin.
# Outputs the filtered list to stdout.
# 1.firstYear
# 2.firstMonth
# 3.firstDay
# 4.lastYear
# 5.lastMonth
# 6.lastDay
filterDateRange() {
  local -r firstYear="$1"
  local -r firstMonth="$2"
  local -r firstDay="$3"
  local -r lastYear="$4"
  local -r lastMonth="$5"
  local -r lastDay="$6"


  gawk -F "/" '
    BEGIN {
      RS = "\0"
      ORS = "\0"
    }

    {
      min = int(sprintf("%d%02d%02d", firstYear, firstMonth, firstDay))
      max = int(sprintf("%d%02d%02d", lastYear, lastMonth, lastDay))
      year = int($(NF - 2))
      month = int(gensub(/^0*/, "", 1, $(NF - 1)))
      day = int(gensub(/_message|^0*/, "", "g", $NF)) 
      summed = int(sprintf("%d%02d%02d", year, month, day))
      if (summed >= min && summed <= max)
      {
        print $0
      }
    }
  ' firstYear="$firstYear" firstMonth="$firstMonth" firstDay="$firstDay" \
    lastYear="$lastYear" lastMonth="$lastMonth" lastDay="$lastDay"
}

# Formats lines in standard IRC log style
#
# Consumes lines of shellby log format from stdin.
# Outputs formatted lines to stdout.
formatLogLines() {
  local -r showHost="$1"
  if "$showHost"; then
    gawk -F "\r" '
      /^[0-9]+/{
        if ($5 ~ /message/) {
          printf("[%s] %s (%s@%s): %s\n", strftime("%Y-%m-%d %H:%M:%S",$1), $2, $3, $4, $6);
        } else if ( $5 ~ /notice/) {
          printf( "[%s] (notice) %s (%s@%s): %s\n", strftime("%Y-%m-%d %H:%M:%S",$1), $2, $3, $4, $6);
        } else if ( $5 ~ /action/) {
          print "[" strftime("%Y-%m-%d %H:%M:%S",$1) "]", "*", $2, $6
        } else {
          print $0
        }
      }
      /^[^0-9]/{print $0}
    '

  else
    gawk -F "\r" '
      /^[0-9]+/{
        if ($5 ~ /message/) {
          print "[" strftime("%Y-%m-%d %H:%M:%S",$1) "]", $2 ":", $6
        } else if ( $5 ~ /notice/) {
          print "[" strftime("%Y-%m-%d %H:%M:%S",$1) "] (notice)", $2 ":", $6
        } else if ( $5 ~ /action/) {
          print "[" strftime("%Y-%m-%d %H:%M:%S",$1) "]", "*", $2, $6
        } else {
          print $0
        }
      }
      /^[^0-9]/{print $0}
    '
  fi
}

# Parses the -t and -T time parameters
#
# The output is three space separated values:
# year month day
#
# 1.parameterInput the parameter we are parsing
# 2.timeParts[0] the default year
# 2.timeParts[1] the default month
# 2.timeParts[2] the default day
parseTime() {
  local -r parameterInput="$1"
  shift
  local -a timeParts=("$@")

  local -a splitParams=( $(IFS="-"; printf "%s\n" $parameterInput ) )
  if [[ "${splitParams[0]}" != "*" ]]; then
    if [[ "${splitParams[0]}" =~ ^[0-9]{2}$ ]]; then
      timeParts[0]="20${splitParams[0]}"
    else
      timeParts[0]="${splitParams[0]##0}"
    fi
  fi
  if [[ "${splitParams[1]}" != "*" ]]; then
      timeParts[1]="${splitParams[1]##0}"
  fi
  if [[ "${splitParams[2]}" != "*" ]]; then
      timeParts[2]="${splitParams[2]##0}"
  fi

  echo "${timeParts[@]}"

}

filterCommand() {
  local channel="$1"
  local targetChannel="$2"

  if [[ "$channel" == "$targetChannel" ]]; then
    tail -n +2
  else
    cat -
  fi
}

main() {
  ###################
  # Input Arguments #
  ###################

  local -r channel="$2"
  local -r message="$6"
  local -r fullMessage="$7"

  ##################
  # Variable Setup #
  ##################

  local -a assignableParameters=( m e f A B C t T s )
  local -a passThroughFlags=( c i E P F )

  local targetChannel

  local -a splitArgs=()
  local -i i=0

  resplitAndParse "$message"

  if ((${#vargs[@]} > 0)); then

    local userCares=true

    if [[ -n "${argMap[dontcare]+_}" ]]; then
      userCares=false
    fi

    local reverseOrder=false

    if [[ -n "${argMap[r]+_}" ]]; then
      reverseOrder=true
    fi

    ###########################
    # Process Time parameters #
    ###########################

    local -a startTime=(0 0 0)
    local -a endTime=(9999 99 99)

    local -r timeRegex="([0-9]{1,4}|\*)-([0-9]{1,2}|\*)-([0-9]{1,2}|\*)"
    
    if [[ "${argMap[t]+_}" && "${argMap[t]}" =~ $timeRegex ]]; then
      startTime=( $(parseTime "${argMap[t]}" "${startTime[@]}") )
    fi

    if [[ "${argMap[T]+_}" && "${argMap[T]}" =~ $timeRegex ]]; then
      endTime=( $(parseTime "${argMap[T]}" "${endTime[@]}") )
    fi

    ############################
    # Process other parameters #
    ############################

    local gargs="$(printf "%s " "${vargs[@]}" | sed 's/ $//;s/\\r/\r/g')"

    local -a gflags=( )

    local re='^[1-9][0-9]*$'

    for f in "${passThroughFlags[@]}"; do
      if [[ "${argMap[$f]+_}" ]]; then
        gflags+=( -$f )
      fi
    done

    local hasContext=false

    if [[ "${argMap[C]+_}" && "${argMap[C]}" =~ $re ]]; then
      gflags+=( -C "${argMap[C]}" )
      hasContext=true
    else 
      if [[ "${argMap[B]+_}" && "${argMap[B]}" =~ $re ]]; then
        gflags+=( -A "${argMap[B]}" )
        hasContext=true
      fi
      if [[ "${argMap[A]+_}" && "${argMap[A]}" =~ $re ]]; then
        gflags+=( -B "${argMap[A]}" )
        hasContext=true
      fi
    fi

    local -i skip=1

    if [[ "${argMap[s]+_}" && "${argMap[s]}" =~ $re ]]; then
      skip+="${argMap[s]}"
      if "$hasContext" && "$userCares"; then
        privmsg "$channel" "Warning: The skip flag(-s) works by lines, not by results. So using it with one of the context flags (-[ABC]) is probably not going to behave as expected. You can use --dontcare to suppress this warning."
      fi
    fi

    local -i limit=0
    if [[ "${argMap[m]+_}" && "${argMap[m]}" =~ $re ]]; then
      limit="${argMap[m]}"+"$skip"-1
      gflags+=( -m "$limit" )
    fi

    local showHost=false
    if [[ "${argMap[h]+_}" ]]; then
      showHost=true
    fi

    local -r channelRegex="^#[^/]+$"

    if [[ "${argMap[f]+_}" && "${argMap[f]}" =~ $channelRegex ]]; then
      targetChannel="${argMap[f]}"
    else
      targetChannel="$channel"
    fi

    local -ir extendedRegex="${argMap[E]+1}"
    local -ir perlRegex="${argMap[P]+1}"
    local -ir fixedMatch="${argMap[F]+1}"

    if ((extendedRegex + perlRegex + fixedMatch > 1)); then
      privmsg "$channel" "Um, that is more than one regex engine at once. Want to try again?"
      exit 0
    fi

    if [[ ! "$targetChannel" =~ $channelRegex ]]; then
      exit 0
    fi

    ###################
    # Search pipeline #
    ###################

    local -ra emptyMessages=(
      "nada"
      "No one has ever said anything remotely like that."
      "RTFM"
      "Error: your query was dumb"
    )

    local -ri selection="$((RANDOM % ${#emptyMessages[@]}))"

    if "$reverseOrder"; then
      find "$botLogs/$targetChannel" -type f -name '*_message' -print0 \
        | filterDateRange "${startTime[@]}" "${endTime[@]}" \
        | sort -z \
        | xargs -0 cat \
        | filterCommand "$channel" "$targetChannel" \
        | grep "${gflags[@]}" -- "$gargs" \
        | formatLogLines "$showHost" \
        | awk '
          NR > skip + 499 { exit 0 }
          NR >= skip { print $0 }
        ' skip="$skip"
    else
      find "$botLogs/$targetChannel" -type f -name '*_message' -print0 \
        | filterDateRange "${startTime[@]}" "${endTime[@]}" \
        | sort -rz \
        | xargs -0 tac \
        | filterCommand "$channel" "$targetChannel" \
        | grep "${gflags[@]}" -- "$gargs" \
        | formatLogLines "$showHost" \
        | awk '
          NR > skip + 499 { exit 0 }
          NR >= skip { print $0 }
        ' skip="$skip" \
        | tac
    fi | ifEmpty "${emptyMessages[$selection]}" \
      | pastebin "$channel" 
  fi
}

main "$@"
