#!/bin/bash

###############
# load config #
###############

export PATH="$botLib:$PATH"

export LANG="en_US.utf8"

export botConfig
export botLib
export botShare

declare -rx botPid="$$"
declare -rx botDir="$(cd "$(dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )" 

declare -rx botLogs="$botConfig/logs"

source "$botLib/readprop.sh"
readProperties "$botConfig/etc/config"

if [[ ! "${properties[nick]+_}" ]]; then
  printf "%s\n" "Nick missing from $botConfig/etc/config." >&2
  kill -INT "$thisPid"
  exit 1
fi

if [[ ! -s "$botConfig/etc/admins" ]]; then
  printf "\033[0;33m%s\033[0m\n" "Warning: You don't have any admins configured in $botConfig/etc/admins" >&2
fi

if [[ ! -f "$botConfig/etc/wolframKey" ]]; then
  printf "\033[0;33m%s\033[0m\n" "Warning: There is no API key in $botConfig/etc/wolframKey. The wolfram command will not work." >&2
fi

if [[ ! -f "$botConfig/etc/unshortenKey" ]]; then
  printf "\033[0;33m%s\033[0m\n" "Warning: There is no API key in $botConfig/etc/unshortenKey. Without an unshorten.it key the unshort command will not work." >&2
fi

if [[ ! -f "$botConfig/etc/youtubeKey" ]]; then
  printf "\033[0;33m%s\033[0m\n" "Warning: There is no API key in $botConfig/etc/youtubeKey. The youtube command will not work." >&2
fi

if [[ ! -f "$botConfig/etc/password" ]]; then
  printf "\033[0;34m%s\033[0m\n" "Info: It is strongly recommended that you register a nick for the bot with nickserv then place the password in $botConfig/etc/password" >&2
fi

#####################
# Set up buffer dir #
#####################

if [[ "${properties[tmpdir]+_}" ]]; then
  TMPDIR="${properties[tmpdir]}"
fi

declare -rx bufferDir="$(mktemp -p "$TMPDIR" -d streambot.XXXXXX)"

mkdir "$bufferDir/etc"

printf "%s\n" "${properties[nick]}" > "$bufferDir/etc/nickname"

################
# toggle debug #
################

[ ! -z "$DEBUG" ] && set -x

#########################
# set up signal handler #
#########################

trap "rm -rf $bufferDir; exit 1" SIGINT SIGTERM EXIT

#####################
# load dependencies #
#####################

source "$botLib/commandLoader.sh"

###################
# Test Connection #
###################

while ! netcat -z -w 5 "${properties[server]}" "${properties[port]}"; do
  sleep 1
done

#################
# update uptime #
#################

printf "%(%s)T" > "$bufferDir/etc/lastContact"

if [[ -f "$botLogs/uptimeStats" ]]; then
  declare uptimeStats="$(gawk '
    {
      current = strftime("%s")
      previousValue = $1
      first = $2
      last = $3
      newValue = (previousValue * (last - first)) / (current - first)
      printf("%.12g %d %d", newValue, first, current)
    }

    ' < "$botLogs/uptimeStats")"
  printf "%s\n" "$uptimeStats" > "$botLogs/uptimeStats"
fi

#################
# start the bot #
#################

mkfifo "$bufferDir/toNetcat" "$bufferDir/fromNetcat"
managePipes "$botLib/commands/" "$bufferDir/toNetcat" "$bufferDir/fromNetcat"

throttle() {
  local -r file="$1"

  local -r MAX_TOKENS=5

  local -i lastTime
  local -i currentTokens

  local -i current
  local -i previous
  local -i elapsed
  local -i currentTokens
  local -i addTokens
  local -i spentTokens=1

  while IFS= read -r line; do
    printf -v current "%(%s)T" 

    previous="$lastTime"
    elapsed=$((current - previous))
    lastTime="$current"
    addTokens=$(((elapsed * (MAX_TOKENS + 1)) / 10))
    currentTokens=$((
      addTokens + currentTokens > MAX_TOKENS
        ? MAX_TOKENS
        : addTokens + currentTokens - spentTokens
    ))
    if ((currentTokens <= 0)); then
      sleep "$(( (1 - currentTokens) * 10 / MAX_TOKENS ))"
    fi

    printf "%s\n" "$line"
  done < <(grep --line-buffered "^" "$file")
}

declare -a additionalArgs=()
if [[ "${properties[ssl]}" == "true" ]]; then
  additionalArgs+="--ssl"
fi

stdbuf -oL ncat "${additionalArgs[@]}" -4 "${properties[server]}" "${properties[port]}" < <(throttle "$bufferDir/toNetcat") \
  | sed -u 's/$//' \
  | tee "$bufferDir/fromNetcat" \
  | grep --line-buffered "^"  & 
declare -i pipelinePid=$!

echo started ncat >&2

trap reloadAllConfig SIGHUP

{
  while ! ps -p $pipelinePid >/dev/null 2>&1; do
    sleep 5
  done 

  while ps -p $pipelinePid >/dev/null 2>&1; do
    sleep 5
  done 

  printf "%s\n" "!!! Ncat died. Reloading Main." >&2

  kill -USR1 $thisPid
} &

watchFiles "$botLib/commands/" "$bufferDir/toNetcat" "$bufferDir/fromNetcat"

