#!/bin/bash

source "$botLib/http.sh"
source "$botLib/blate.sh"
source "$botLib/utility.sh"
 
declare -r TMP_MAN_FOLDER="$bufferDir/web/man"
declare -ri MAX_CACHE_SIZE="$((10*1024*1024))"
declare -r MAN_REGEX='^[a-zA-Z0-9_-]+$'
declare -r MAN_SECTION_REGEX='^[0-9]/[a-zA-Z0-9_-]+$'

serveMan() {
  local file="${3#/man/}"

  local section
    
  if [[ "$file" =~ $MAN_SECTION_REGEX ]]; then
    section="${file:0:1}"
    file="${file:2}"
  elif [[ ! "$file" =~ $MAN_REGEX ]]; then
    return 1
  fi

  mkdir -p "$TMP_MAN_FOLDER" &>/dev/null

  local manFile="$(man -M "$botShare/man/" -w "$file")"
  local hashName="$(md5sum <<< "$manFile" | head -c 10)"
  local cacheFile="$TMP_MAN_FOLDER/$hashName"

  local -i cachedTime=0
  if [[ -f "$cacheFile" ]]; then
    cacheTime="$(stat -c %Y "$cacheFile")"
  fi
  local -i changeTime="$(stat -c %Y "$manFile")"

  if ((cachedTime == 0 || cachedTime > changeTime )); then
    trimCache "$TMP_MAN_FOLDER" "$MAX_CACHE_SIZE"

    if [[ -n "$section" ]]; then
      MANWIDTH=80 man -M "$botShare/man/" "$section" "$file" > "$cacheFile"
    else
      MANWIDTH=80 man -M "$botShare/man/" "$file" > "$cacheFile"
    fi
  fi

  serveFile "$TMP_MAN_FOLDER" "$hashName"
  return $?
}

declare -r PASTE_DIR="$bufferDir/web/paste"
declare -r LOG_PASTE_DIR="$bufferDir/web/logpaste"
declare -r HEX='^[a-f0-9]+$'
declare -r LOGPASTE='^([a-f0-9]+)\.(txt|html)$'

servePastes() {
  local file="${3#/paste/}"

  if [[ "$file" =~ $HEX ]]; then
    local -r target="$(find "$PASTE_DIR" -type f -print0 | grep -Fzx -m 1 "$PASTE_DIR/$file")"
    if [[ -n "$target" && -f "$target" ]]; then
      render "$botLib/web/paste.html" | sendResponsePipe 200
      return 0
    fi
  fi
  return 1
  
}

serveRootFiles() {
  local -r file="${3#/}"
  serveFile "$botShare" "$file"
  return $?
}

formatLogLines() {
  local -r showHost="$1"
  if "$showHost"; then
    gawk -F "\r" '
      /^[0-9]+/{
        if ($5 ~ /message/) {
          printf("[%s] %s (%s@%s): %s\n", strftime("%Y-%m-%d %H:%M:%S",$1), $2, $3, $4, $6);
        } else if ( $5 ~ /notice/) {
          printf( "[%s] (notice) %s (%s@%s): %s\n", strftime("%Y-%m-%d %H:%M:%S",$1), $2, $3, $4, $6);
        } else if ( $5 ~ /action/) {
          print "[" strftime("%Y-%m-%d %H:%M:%S",$1) "]", "*", $2, $6
        } else {
          print $0
        }
      }
      /^[^0-9]/{print $0}
    '

  else
    gawk -F "\r" '
      /^[0-9]+/{
        if ($5 ~ /message/) {
          print "[" strftime("%Y-%m-%d %H:%M:%S",$1) "]", $2 ":", $6
        } else if ( $5 ~ /notice/) {
          print "[" strftime("%Y-%m-%d %H:%M:%S",$1) "] (notice)", $2 ":", $6
        } else if ( $5 ~ /action/) {
          print "[" strftime("%Y-%m-%d %H:%M:%S",$1) "]", "*", $2, $6
        } else {
          print $0
        }
      }
      /^[^0-9]/{print $0}
    '
  fi

}
escapeHtml() {
  sed -E '
    s/&/\&amp;/g
    s/>/\&gt;/g
    s/</\&lt;/g'
}

formatHtmlLogLines() {
gawk -F "\r" '
  /^[0-9]+/{
    if ($5 ~ /action/) {
      printf("<div class=\"log-line log-%s\" data-username=\"%s\" data-hostname=\"%s\">[<span class=\"log-timestamp\">%s</span>] * <span class=\"log-nick\">%s</span> <span class=\"log-content\">%s</span></div>\n", $5, $3, $4,  strftime("%Y-%m-%d %H:%M:%S",$1), $2, $6);
    } else {
      printf("<div class=\"log-line log-%s\" data-username=\"%s\" data-hostname=\"%s\">[<span class=\"log-timestamp\">%s</span>] <span class=\"log-nick\">%s</span>: <span class=\"log-content\">%s</span></div>\n", $5, $3, $4,  strftime("%Y-%m-%d %H:%M:%S",$1), $2, $6);
    }

  }
  /^[^0-9]/{
    # group separators
    printf("</div>\n<div class=\"log-group\">\n")
  }
'

}

serveLogPaste() {
  local file="${3#/log/paste/}"
  if [[ "$file" =~ $LOGPASTE ]]; then
    local format="${BASH_REMATCH[2]}"
    local file="${BASH_REMATCH[1]}"
    local -r target="$(find "$LOG_PASTE_DIR" -type f -print0 | grep -Fzx -m 1 "$LOG_PASTE_DIR/$file")"
    if [[ -n "$target" && -f "$target" ]]; then
      case "$format" in
        txt)
          local showHost
          if [[ "${queryVars[h]}" == true ]]; then
            showHost=true
          else
            showHost=false
          fi
          local -A responseHeaders=()
          responseHeaders["Content-Type"]="text/plain"
          formatLogLines "$showHost" <"$target" \
            | sendResponsePipe 200
          return 0
          ;;
        html)
          escapeHtml <"$target" \
            | formatHtmlLogLines \
            | cat "$botLib/web/logheader.html" - "$botLib/web/logfooter.html"\
            | sendResponsePipe 200
          return 0
          ;;
      esac
    fi
  fi
  return 1
}

serveBadFile() {
  sendResponsePipe 200 <"$botShare/badfile"
  return 0
}

main() {
  addRoute GET '^/(robots.txt|favicon.ico)$' serveRootFiles
  addRoute GET '^/man/' serveMan
  addRoute GET '^/paste/' servePastes
  addRoute GET '^/badfile$' serveBadFile
  addRoute GET '^/log/paste/' serveLogPaste

  runServer
}

main "$@"
