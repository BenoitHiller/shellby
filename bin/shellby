#!/bin/bash

#########################
# set up signal handler #
#########################

declare exitp=true

handleTerm() {
  if $exitp; then
    exit 1
  else
    exitp=true
  fi
}

declare -r thisPid=$$
export thisPid
# when the parent is killed, clean up all of the subprocesses(maybe not -9...)
trap "kill -TERM -$thisPid;" SIGINT EXIT

trap "handleTerm" SIGTERM

####################
# check for config #
####################

if [[ ! -d "$HOME/.shellby" ]]; then
  echo "shellby home directory not found. Creating in ~/.shellby" >&2
  mkdir "$HOME/.shellby"
  mkdir "$HOME/.shellby/etc"
fi

declare -r botConfig="$HOME/.shellby"
export botConfig


declare -r parentDir="$(cd "$(dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )" 
declare botLib
declare botShare

if [[ "$parentDir" == "/usr/bin" ]]; then
  botLib="/usr/lib/shellby"
  botShare="/user/share/shellby"
else
  botLib="$parentDir/lib"
  botShare="$parentDir/share"
fi

####################
# Check for config #
####################

if [[ ! -f "$botConfig/etc/config" ]]; then

  cp "$botShare/sample.config" "$botConfig/etc/config"

  echo "No config file found. A default config file has been placed in $botConfig/etc/config" >&2
  echo "Please modify the config file then relaunch shellby" >&2
  exit 1
fi

###################
# launch with env #
###################

startBot() {
  env -i thisPid=$thisPid DEBUG=$DEBUG botConfig="$botConfig" botLib="$botLib" botShare="$botShare" $botLib/main "$@"
}

reload() {
  exitp=false
  echo "!!! Recieved SIGUSR1. Doing main reload."
  kill -TERM -$thisPid
  sleep 10
  startBot &
}

trap "reload" SIGUSR1

replace() {
  exitp=false
  echo "!!! Recieved SIGUSR2. Doing full replace."
  kill -TERM -$thisPid
  wait
  exec "${BASH_SOURCE[0]}"
}

trap "replace" SIGUSR2

startBot &

while true; do
  wait
  sleep 1
done
